"""
  SHOGun, https://terrestris.github.io/shogun/

  Copyright Â© 2020-present terrestris GmbH & Co. KG

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0.txt

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
"""
scalar JSON
scalar Geometry
scalar DateTime

type Query {
    allApplications: [Application]
    applicationById(id: Int): Application
    applicationByIdAndTime(id: Int, time: DateTime): Application
    applicationByIdAndRevision(id: Int, rev: Int): Revision
    applicationRevisionsById(id: Int): Revisions
    allApplicationsByIds(ids: [Int]): [Application]

    allFiles: [File]
    fileById(id: Int): File
    fileByIdAndTime(id: Int, time: DateTime): File
    fileByIdAndRevision(id: Int, rev: Int): Revision
    fileRevisionsById(id: Int): Revisions
    allFilesByIds(ids: [Int]): [File]

    allGroups: [Group]
    groupById(id: Int): Group
    groupByIdAndTime(id: Int, time: DateTime): Group
    groupByIdAndRevision(id: Int, rev: Int): Revision
    groupRevisionsById(id: Int): Revisions
    allGroupsByIds(ids: [Int]): [Group]

    allImageFiles: [ImageFile]
    imageFileById(id: Int): ImageFile
    imageFileByIdAndTime(id: Int, time: DateTime): ImageFile
    imageFileByIdAndRevision(id: Int, rev: Int): Revision
    imageFileRevisionsById(id: Int): Revisions
    allImageFilesByIds(ids: [Int]): [ImageFile]

    allLayers: [Layer]
    layerById(id: Int): Layer
    layerByIdAndTime(id: Int, time: DateTime): Layer
    layerByIdAndRevision(id: Int, rev: Int): Revision
    layerRevisionsById(id: Int): Revisions
    allLayersByIds(ids: [Int]): [Layer]

    allUsers: [User]
    userById(id: Int): User
    userByIdAndTime(id: Int, time: DateTime): User
    userByIdAndRevision(id: Int, rev: Int): Revision
    userRevisionsById(id: Int): Revisions
    allUsersByIds(ids: [Int]): [User]
}

type Mutation {
    createApplication(entity: MutateApplication): Application!
    updateApplication(id: Int, entity: MutateApplication): Application!
    deleteApplication(id: Int): Boolean

    createGroup(entity: MutateGroup): Group!
    updateGroup(id: Int, entity: MutateGroup): Group!
    deleteGroup(id: Int): Boolean

    createLayer(entity: MutateLayer): Layer!
    updateLayer(id: Int, entity: MutateLayer): Layer!
    deleteLayer(id: Int): Boolean

    createUser(entity: MutateUser): User!
    updateUser(id: Int, entity: MutateUser): User!
    deleteUser(id: Int): Boolean
}

interface BaseEntity {
  id: Int
  created: DateTime
  modified: DateTime
}

type Revisions {
    content: [Revision]
}

type Revision {
    metadata: RevisionMetadata
    entity: BaseEntity
    revisionNumber: RevisionFieldInfo
    revisionInstant: RevisionFieldInfo
    requiredRevisionNumber: Int
    requiredRevisionInstant: DateTime
}

type RevisionMetadata {
    revisionType: String
    delegate: RevisionDelegate
    revisionNumber: RevisionFieldInfo
    revisionDate: RevisionFieldInfo
    revisionInstant: RevisionFieldInfo
    requiredRevisionNumber: Int
    requiredRevisionInstant: DateTime
    changedFields: [String]
}

type RevisionDelegate {
    id: Int
    timestamp: Long
    revisionDate: DateTime
}

type RevisionFieldInfo {
    empty: Boolean
    present: Boolean
}

type Application implements BaseEntity {
    id: Int
    created: DateTime
    modified: DateTime
    name: String
    i18n: JSON
    stateOnly: Boolean
    clientConfig: JSON
    layerTree: JSON
    layerConfig: JSON
    toolConfig: JSON
}

input MutateApplication {
    name: String!
    i18n: JSON
    stateOnly: Boolean
    clientConfig: JSON
    layerTree: JSON
    layerConfig: JSON
    toolConfig: JSON
}

type File implements BaseEntity {
    id: Int
    created: DateTime
    modified: DateTime
    fileUuid: ID
    active: Boolean
    fileName: String
    fileType: String
}

type GroupRepresentation {
    id: ID
    name: String
    path: String
    realmRoles: [String]
    subGroups: [GroupRepresentation]
}

type Group implements BaseEntity {
    id: Int
    created: DateTime
    modified: DateTime
    keycloakId: ID
    keycloakRepresentation: GroupRepresentation
}

input MutateGroup {
    keycloakId: ID
}

type ImageFile implements BaseEntity {
    id: Int
    created: DateTime
    modified: DateTime
    fileUuid: ID
    active: Boolean
    fileName: String
    fileType: String
    width: Int
    height: Int
}

type Layer implements BaseEntity {
    id: Int
    created: DateTime
    modified: DateTime
    name: String
    clientConfig: JSON
    sourceConfig: JSON
    features: JSON
    type: String
}

input MutateLayer {
    name: String!
    clientConfig: JSON
    sourceConfig: JSON
    features: JSON
    type: String
}

type UserRepresentation {
    id: ID
    username: String
    enabled: Boolean
    firstName: String
    lastName: String
    email: String
    realmRoles: [String]
    groups: [String]
}

type User implements BaseEntity {
    id: Int
    created: DateTime
    modified: DateTime
    keycloakId: ID
    details: JSON
    clientConfig: JSON
    keycloakRepresentation: UserRepresentation
}

input MutateUser {
    keycloakId: ID!
    details: JSON
    clientConfig: JSON
}
